// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Data.Entities.FavouriteTeamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TeamId")
                        .IsUnique();

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("Data.Entities.MatchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AwayTeamScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HomeTeamScore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("matches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AwayTeamId = 18,
                            AwayTeamScore = 1,
                            Date = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 1,
                            HomeTeamScore = 2
                        },
                        new
                        {
                            Id = 2,
                            AwayTeamId = 17,
                            AwayTeamScore = 0,
                            Date = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 2,
                            HomeTeamScore = 3
                        },
                        new
                        {
                            Id = 3,
                            AwayTeamId = 16,
                            AwayTeamScore = 3,
                            Date = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 3,
                            HomeTeamScore = 4
                        },
                        new
                        {
                            Id = 4,
                            AwayTeamId = 15,
                            AwayTeamScore = 2,
                            Date = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 4,
                            HomeTeamScore = 1
                        },
                        new
                        {
                            Id = 5,
                            AwayTeamId = 14,
                            AwayTeamScore = 1,
                            Date = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 5,
                            HomeTeamScore = 1
                        },
                        new
                        {
                            Id = 6,
                            AwayTeamId = 13,
                            AwayTeamScore = 3,
                            Date = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 6,
                            HomeTeamScore = 2
                        },
                        new
                        {
                            Id = 7,
                            AwayTeamId = 12,
                            AwayTeamScore = 1,
                            Date = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 7,
                            HomeTeamScore = 2
                        },
                        new
                        {
                            Id = 8,
                            AwayTeamId = 11,
                            AwayTeamScore = 2,
                            Date = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 8,
                            HomeTeamScore = 2
                        },
                        new
                        {
                            Id = 9,
                            AwayTeamId = 10,
                            AwayTeamScore = 1,
                            Date = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 9,
                            HomeTeamScore = 4
                        });
                });

            modelBuilder.Entity("Data.Entities.TeamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Draws")
                        .HasColumnType("INTEGER");

                    b.Property<sbyte>("Goal_Diff")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("League_Position")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Losts")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Matches_Played")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<sbyte>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Wins")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Draws = (byte)6,
                            Goal_Diff = (sbyte)41,
                            League_Position = (byte)1,
                            Losts = (byte)5,
                            Matches_Played = (byte)34,
                            Name = "Genk",
                            Points = (sbyte)75,
                            Wins = (byte)23
                        },
                        new
                        {
                            Id = 2,
                            Draws = (byte)6,
                            Goal_Diff = (sbyte)29,
                            League_Position = (byte)2,
                            Losts = (byte)5,
                            Matches_Played = (byte)34,
                            Name = "Union SG",
                            Points = (sbyte)75,
                            Wins = (byte)23
                        },
                        new
                        {
                            Id = 3,
                            Draws = (byte)6,
                            Goal_Diff = (sbyte)33,
                            League_Position = (byte)3,
                            Losts = (byte)6,
                            Matches_Played = (byte)34,
                            Name = "Royal Antwerp",
                            Points = (sbyte)72,
                            Wins = (byte)22
                        },
                        new
                        {
                            Id = 4,
                            Draws = (byte)11,
                            Goal_Diff = (sbyte)25,
                            League_Position = (byte)4,
                            Losts = (byte)7,
                            Matches_Played = (byte)34,
                            Name = "Club Brugge",
                            Points = (sbyte)59,
                            Wins = (byte)16
                        },
                        new
                        {
                            Id = 5,
                            Draws = (byte)8,
                            Goal_Diff = (sbyte)26,
                            League_Position = (byte)5,
                            Losts = (byte)10,
                            Matches_Played = (byte)34,
                            Name = "Gent",
                            Points = (sbyte)56,
                            Wins = (byte)16
                        },
                        new
                        {
                            Id = 6,
                            Draws = (byte)7,
                            Goal_Diff = (sbyte)13,
                            League_Position = (byte)6,
                            Losts = (byte)11,
                            Matches_Played = (byte)34,
                            Name = "Standard Liege",
                            Points = (sbyte)55,
                            Wins = (byte)16
                        },
                        new
                        {
                            Id = 7,
                            Draws = (byte)9,
                            Goal_Diff = (sbyte)8,
                            League_Position = (byte)7,
                            Losts = (byte)11,
                            Matches_Played = (byte)34,
                            Name = "Wasterlo",
                            Points = (sbyte)51,
                            Wins = (byte)14
                        },
                        new
                        {
                            Id = 8,
                            Draws = (byte)11,
                            Goal_Diff = (sbyte)4,
                            League_Position = (byte)8,
                            Losts = (byte)10,
                            Matches_Played = (byte)34,
                            Name = "Cercle Brugge",
                            Points = (sbyte)50,
                            Wins = (byte)13
                        },
                        new
                        {
                            Id = 9,
                            Draws = (byte)6,
                            Goal_Diff = (sbyte)-7,
                            League_Position = (byte)9,
                            Losts = (byte)14,
                            Matches_Played = (byte)34,
                            Name = "Royal Charleroi",
                            Points = (sbyte)48,
                            Wins = (byte)14
                        },
                        new
                        {
                            Id = 10,
                            Draws = (byte)9,
                            Goal_Diff = (sbyte)8,
                            League_Position = (byte)10,
                            Losts = (byte)12,
                            Matches_Played = (byte)34,
                            Name = "OH Leuven",
                            Points = (sbyte)48,
                            Wins = (byte)13
                        },
                        new
                        {
                            Id = 11,
                            Draws = (byte)7,
                            Goal_Diff = (sbyte)3,
                            League_Position = (byte)11,
                            Losts = (byte)14,
                            Matches_Played = (byte)34,
                            Name = "Anderlecht",
                            Points = (sbyte)46,
                            Wins = (byte)13
                        },
                        new
                        {
                            Id = 12,
                            Draws = (byte)9,
                            Goal_Diff = (sbyte)-3,
                            League_Position = (byte)12,
                            Losts = (byte)14,
                            Matches_Played = (byte)34,
                            Name = "Sint-Truiden",
                            Points = (sbyte)42,
                            Wins = (byte)11
                        },
                        new
                        {
                            Id = 13,
                            Draws = (byte)7,
                            Goal_Diff = (sbyte)-14,
                            League_Position = (byte)13,
                            Losts = (byte)16,
                            Matches_Played = (byte)34,
                            Name = "Mechelen",
                            Points = (sbyte)40,
                            Wins = (byte)11
                        },
                        new
                        {
                            Id = 14,
                            Draws = (byte)7,
                            Goal_Diff = (sbyte)-24,
                            League_Position = (byte)14,
                            Losts = (byte)19,
                            Matches_Played = (byte)34,
                            Name = "Kortrijk",
                            Points = (sbyte)31,
                            Wins = (byte)8
                        },
                        new
                        {
                            Id = 15,
                            Draws = (byte)7,
                            Goal_Diff = (sbyte)-35,
                            League_Position = (byte)15,
                            Losts = (byte)20,
                            Matches_Played = (byte)34,
                            Name = "Eupen",
                            Points = (sbyte)28,
                            Wins = (byte)7
                        },
                        new
                        {
                            Id = 16,
                            Draws = (byte)6,
                            Goal_Diff = (sbyte)-39,
                            League_Position = (byte)16,
                            Losts = (byte)21,
                            Matches_Played = (byte)34,
                            Name = "Oostende",
                            Points = (sbyte)27,
                            Wins = (byte)7
                        },
                        new
                        {
                            Id = 17,
                            Draws = (byte)9,
                            Goal_Diff = (sbyte)-28,
                            League_Position = (byte)17,
                            Losts = (byte)19,
                            Matches_Played = (byte)34,
                            Name = "Zulte Waregem",
                            Points = (sbyte)27,
                            Wins = (byte)6
                        },
                        new
                        {
                            Id = 18,
                            Draws = (byte)5,
                            Goal_Diff = (sbyte)-40,
                            League_Position = (byte)18,
                            Losts = (byte)24,
                            Matches_Played = (byte)34,
                            Name = "Seraing",
                            Points = (sbyte)20,
                            Wins = (byte)5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d45c99df-a53e-46e4-b3b1-a2dec2cc7347",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "932ef0cf-5249-4756-8e66-8ff395062c74",
                            Email = "karolina@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAROLINA@WSEI.EDU.PL",
                            NormalizedUserName = "KAROLINA",
                            PasswordHash = "AQAAAAEAACcQAAAAEIBw2kbF9YvxV+oT+4QKI5iRIO4xOqLbef0HotILi/7SFWA1ScOsN4pwLU54J0Lkrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25cbb1f0-d789-49de-8bd7-ab8911ebe541",
                            TwoFactorEnabled = false,
                            UserName = "karolina"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.MatchEntity", b =>
                {
                    b.HasOne("Data.Entities.TeamEntity", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.TeamEntity", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.TeamEntity", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");
                });
#pragma warning restore 612, 618
        }
    }
}
